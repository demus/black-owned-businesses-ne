{"version":3,"sources":["components/ImagePreview.js","ui/Pill.js","components/TagSection.js","components/WebsiteSection.js","components/MenuSection.js","components/ContactInformationSection.js","components/PlaceDetailsPopup.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["ImagePreview","businessType","className","src","Pill","tag","replace","toLowerCase","TagSection","map","id","removeProtocol","website","WebsiteSection","icon","faGlobe","size","href","maxUrlLength","placeholder","length","substring","truncateUrl","MenuSection","menuURL","faUtensils","ContactInformationSection","businessTitle","address","phone","PlaceDetailsPopup","placeDetails","business_title","business_type","menu_url","Map","useEffect","L","setView","tileLayer","attribution","addTo","geoJSON","features","style","feature","color","properties","bindPopup","layer","renderToString","minWidth","locate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4808d038.chunk.js","sourcesContent":["import React from \"react\";\nimport { string } from \"prop-types\";\n\nconst ImagePreview = ({ businessType }) => {\n  return (\n    <img className=\"image-preview\" src={businessType} />\n  );\n};\n\nImagePreview.propTypes = {\n  businessType: string.isRequired,\n};\n\nexport default ImagePreview;\n","import React from \"react\";\n\nconst Pill = ({ tag }) => {\n  return (\n    <span\n      className={`pill ${tag\n        .replace(\" \", \"-\")\n        .replace(\"/\", \"-\")\n        .toLowerCase()}`}\n    >\n      {tag}\n    </span>\n  );\n};\n\nexport default Pill;\n","import React from \"react\";\nimport { string } from \"prop-types\";\n\nimport Pill from \"../ui/Pill\";\n\nconst TagSection = ({ businessType }) => {\n  return (\n    <div className=\"tags\">\n      {[businessType, \"Black-Owned\"].map((tag) => (\n        <Pill id={tag} tag={tag} />\n      ))}\n    </div>\n  );\n};\n\nTagSection.propTypes = {\n  businessType: string.isRequired,\n};\n\nexport default TagSection;\n","import React from \"react\"; \n import { string } from \"prop-types\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGlobe } from \"@fortawesome/free-solid-svg-icons\";\n\nconst removeProtocol = (website) => website.replace(/^\\/\\/|^.*?:\\/\\//, \"\");\n\nconst truncateUrl = (website, maxUrlLength=30, placeholder='...') => {\n  website = removeProtocol(website);\n\n  return website.length > maxUrlLength\n    ? `${website.substring(\n        0,\n        maxUrlLength - placeholder.length\n      )}${placeholder}`\n    : website;\n};\n\nconst WebsiteSection = ({ website }) => {\n  return (\n    <div className=\"website-section\">\n      <FontAwesomeIcon className=\"icon\" icon={faGlobe} size=\"2x\" />\n      <a className=\"website-url\" href={website}>\n        {truncateUrl(website)}\n      </a>\n    </div>\n  );\n};\n\nWebsiteSection.propTypes = {\n  website: string.isRequired,\n};\n\nexport default WebsiteSection;\n","import React from \"react\";\nimport { string } from \"prop-types\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUtensils } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MenuSection = ({ menuURL }) => {\n  return (\n    <div className=\"menu-section\">\n      <FontAwesomeIcon className=\"icon\" icon={faUtensils} size=\"2x\" />\n      <a className=\"menu-url\" href={menuURL}>\n        Menu\n      </a>\n    </div>\n  );\n};\n\nMenuSection.propTypes = {\n  menuURL: string.isRequired,\n};\n\nexport default MenuSection;\n","import React from \"react\";\nimport { string } from \"prop-types\";\n\nconst ContactInformationSection = ({ businessTitle, address, phone }) => {\n  return (\n    <div>\n      <div className=\"title\">{businessTitle}</div>\n      <div className=\"address\">{address}</div>\n      <div className=\"phone\">{phone}</div>\n    </div>\n  );\n};\n\nContactInformationSection.propTypes = {\n  businessName: string.isRequired,\n  address: string.isRequired,\n  phone: string.isRequired,\n};\n\nexport default ContactInformationSection;\n","import React from \"react\";\nimport { shape } from \"prop-types\";\n\nimport ImagePreview from \"../components/ImagePreview\";\nimport TagSection from \"../components/TagSection\";\nimport WebsiteSection from \"../components/WebsiteSection\";\nimport MenuSection from \"../components/MenuSection\";\nimport ContactInformationSection from \"./ContactInformationSection\";\n\nconst PlaceDetailsPopup = ({ placeDetails }) => {\n  const {\n    business_title: businessTitle,\n    business_type: businessType,\n    address,\n    phone,\n    website,\n    menu_url: menuURL,\n  } = placeDetails;\n\n  return (\n    <div className=\"popup\">\n      <ImagePreview businessType={businessType} />\n      <div className=\"sections\">\n        <ContactInformationSection\n          businessTitle={businessTitle}\n          address={address}\n          phone={phone}\n        />\n        <TagSection businessType={businessType} />\n        <WebsiteSection website={website} />\n        {menuURL && <MenuSection menuURL={menuURL} />}\n      </div>\n    </div>\n  );\n};\n\nPlaceDetailsPopup.propTypes = {\n  placeDetails: shape().isRequired,\n};\n\nexport default PlaceDetailsPopup;\n","import React, { useEffect } from \"react\";\nimport { renderToString } from \"react-dom/server\";\n\nimport L from \"leaflet\";\n\nimport PlaceDetailsPopup from \"../components/PlaceDetailsPopup\";\nimport features from \"../features.json\";\n\nconst Map = () => {\n  useEffect(() => {\n    const map = L.map(\"map\").setView([42.3601, -71.0589], 12);\n\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(map);\n\n    L.geoJSON(features, {\n      style: function (feature) {\n        return { color: feature.properties.color };\n      },\n    })\n      .bindPopup(\n        (layer) => {\n          return renderToString(\n            <PlaceDetailsPopup placeDetails={layer.feature.properties} />\n          );\n        },\n        { minWidth: 300 }\n      )\n      .addTo(map);\n    map.locate({ setView: true });\n  }, []);\n\n  return <div id=\"map\" />;\n};\n\nexport default Map;\n","import React from \"react\";\n\nimport Map from \"./components/Map\";\n\nfunction App() {\n  return <Map></Map>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}